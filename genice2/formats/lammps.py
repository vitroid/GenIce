# coding: utf-8

from math import cos, radians
from genice2.molecules import serialize
import genice2.formats
from genice2.decorators import timeit, banner
from logging import getLogger
import numpy as np
import sys

desc = {"ref": {},
        "brief": "LAMMPS file (TESTING; in Angdtrom).",
        "usage": "No options available."
        }


AA = 0.1  # nm


class Format(genice2.formats.Format):
    """
The atomic positions of the molecules are output in LAMMPS format.
No options available.
    """

    def __init__(self, **kwargs):
        super().__init__(**kwargs)

    def hooks(self):
        return {7: self.Hook7}

    @timeit
    @banner
    def Hook7(self, ice):
        "Output in LAMMPS format."
        logger = getLogger()
        atoms = []
        for mols in ice.universe:
            atoms += serialize(mols)
        logger.info("  Total number of atoms: {0}".format(len(atoms)))
        conv = 1.0 / AA
        cellmat = ice.repcell.mat
        a,b,c,A,B,C = genice2.cell.cellshape(cellmat)
        # https://docs.lammps.org/Howto_triclinic.html
        # I hope it works
        lx = a
        xy = b*cos(radians(C))
        xz = c*cos(radians(B))
        ly = (b**2-xy**2)**0.5
        yz = (b*c*cos(radians(A)) - xy*xz)/ly
        lz = (c**2 - xz**2 - yz**2)**0.5
        # logger.info([a,b,c,A,B,C])
        # logger.info(cellmat)
        # logger.info([lx,ly,lz,xy,xz,yz])
        s = "# Generated by GenIce2\n"
        s += "\n" # this newline is necessary
        s += f"  {len(atoms)} atoms\n"

        # atom types
        atomdic = dict()
        for atom in atoms:
            molorder, resname, atomname, position, order = atom
            if atomname not in atomdic:
                atomdic[atomname] = len(atomdic) + 1
        s += f"  {len(atomdic)} atom types\n"
        s += "\n"
        s += f"0.0 {lx*conv} xlo xhi\n"
        s += f"0.0 {ly*conv} ylo yhi\n"
        s += f"0.0 {lz*conv} zlo zhi\n"
        if not -1e10 < xy < 1e-10:
            s += f"{xy*conv} xy\n"
        if not -1e10 < xz < 1e-10:
            s += f"{xz*conv} xz\n"
        if not -1e10 < yz < 1e-10:
            s += f"{yz*conv} yz\n"
        s += "\n"
        s += "Masses\n"
        s += "\n"
        masses = {"O":15.999, "H":1.0, "C":12.0, "M":0.0}
        for atom in sorted(atomdic, key=lambda x:atomdic[x]):
            s += f" {atomdic[atom]} {masses[atom[0]]} # {atom}\n"
        s += "\n"
        s += "Atoms\n"
        s += "\n"
        for i, atom in enumerate(atoms):
            molorder, resname, atomname, position, order = atom
            s += f"{i+1} {atomdic[atomname]} {position[0]*conv} {position[1]*conv} {position[2]*conv}\n"
        self.output = s
